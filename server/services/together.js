import Together from "together-ai";

const together = new Together({
  apiKey: process.env.TOGETHER_API_KEY,
});

export async function generateQuestions(testType, subject, topic, numQuestions) {
  if (!process.env.TOGETHER_API_KEY) {
    throw new Error("TOGETHER_API_KEY is not set");
  }
  const topicText = topic ? ` focusing on ${topic}` : "";

  console.log(`ü§ñ Generating ${numQuestions} AI questions for: ${testType} ${subject}${topicText}`);

  const prompt = `Generate ${numQuestions} multiple choice questions for ${testType} ${subject}${topicText}.

CRITICAL REQUIREMENTS:
- Questions MUST be appropriate for ${testType} ${subject} level - no basic algebra for advanced topics
- Use simple math notation: x^2, (a/b), sqrt(x) instead of complex LaTeX
- If using LaTeX in JSON, use double backslashes: \\\\frac{a}{b}
- 4 answer choices each
- Mix of difficulty levels (Easy, Medium, Hard)
- Detailed explanations (3-5 sentences)
- Test-specific content that matches ${testType} standards

${testType === "AP Exams" ? `IMPORTANT: This is AP level - questions must be college-level for ${subject}. Use advanced concepts appropriate for AP ${subject} exams.` : ""}

Return ONLY valid JSON:
{
  "questions": [
    {
      "question": "Question text",
      "choices": ["A", "B", "C", "D"],
      "correct_answer": 0,
      "explanation": "Detailed explanation",
      "difficulty": "Medium"
    }
  ]
}`;

  try {
    const completion = await together.chat.completions.create({
      model: "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
      messages: [
        {
          role: "system",
          content: `You are an expert ${testType} test prep tutor. Create realistic practice questions appropriate for ${testType} ${subject} level. Return ONLY valid JSON with properly escaped strings.`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.6,
      max_tokens: 4000
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error("No response from AI");
    }

    // Enhanced JSON cleaning and parsing
    let jsonText = response.trim();

    // Remove markdown formatting
    if (jsonText.startsWith("```json")) {
      jsonText = jsonText.replace(/```json\n?/, "").replace(/\n?```$/, "");
    }
    if (jsonText.startsWith("```")) {
      jsonText = jsonText.replace(/```\n?/, "").replace(/\n?```$/, "");
    }

    // Handle common AI response issues
    if (!jsonText.startsWith("{")) {
      const startIndex = jsonText.indexOf("{");
      if (startIndex !== -1) {
        jsonText = jsonText.substring(startIndex);
      }
    }

    // Parse JSON with better error handling
    let data;
    try {
      data = JSON.parse(jsonText);
    } catch (parseError) {
      console.error("JSON Parse Error:", parseError);
      console.error("Raw response:", response.substring(0, 500));
      console.error("Cleaned JSON:", jsonText.substring(0, 500));
      throw new Error(`Failed to parse AI response as JSON: ${parseError.message}`);
    }

    const questions = data.questions || [];

    if (questions.length === 0) {
      throw new Error("No questions generated by AI");
    }

    console.log(`‚úÖ Successfully generated ${questions.length} AI questions for ${testType} ${subject}${topicText}`);

    // Format questions with IDs and validation
    return questions.map((q, index) => ({
      id: index + 1,
      question: q.question || "Question unavailable",
      choices: Array.isArray(q.choices) ? q.choices.slice(0, 4) : ["A", "B", "C", "D"],
      correct_answer: typeof q.correct_answer === "number" ? Math.min(3, Math.max(0, q.correct_answer)) : 0,
      explanation: q.explanation || "Explanation unavailable",
      difficulty: q.difficulty || "Medium"
    })).slice(0, numQuestions);

  } catch (error) {
    console.error(`AI generation failed for ${testType} ${subject}${topicText}:`, error);

    // Try one more time with simpler prompt if first attempt failed
    if (!error.message.includes("retry")) {
      console.log("Retrying with simplified prompt...");
      try {
        const simplePrompt = `Create ${numQuestions} ${testType} ${subject}${topicText} practice questions. Use simple math notation (x^2, not LaTeX). Return valid JSON only:
{
  "questions": [
    {
      "question": "Question text",
      "choices": ["A", "B", "C", "D"],
      "correct_answer": 0,
      "explanation": "Why this is correct",
      "difficulty": "Medium"
    }
  ]
}`;

        const retryCompletion = await together.chat.completions.create({
          model: "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
          messages: [
            {
              role: "system",
              content: `Expert ${testType} tutor. Generate ${subject} questions. JSON only.`
            },
            {
              role: "user",
              content: simplePrompt
            }
          ],
          temperature: 0.5,
          max_tokens: 3000
        });

        const retryResponse = retryCompletion.choices[0]?.message?.content?.trim();
        if (retryResponse) {
          let retryJson = retryResponse;
          if (retryJson.includes("```")) {
            retryJson = retryJson.replace(/```json\n?/, "").replace(/```\n?/, "").replace(/\n?```$/, "");
          }

          const retryData = JSON.parse(retryJson);
          const retryQuestions = retryData.questions || [];

          if (retryQuestions.length > 0) {
            console.log(`‚úÖ Retry successful: generated ${retryQuestions.length} AI questions for ${testType} ${subject}${topicText}`);
            return retryQuestions.map((q, index) => ({
              id: index + 1,
              question: q.question || "Question unavailable",
              choices: Array.isArray(q.choices) ? q.choices.slice(0, 4) : ["A", "B", "C", "D"],
              correct_answer: typeof q.correct_answer === "number" ? Math.min(3, Math.max(0, q.correct_answer)) : 0,
              explanation: q.explanation || "Explanation unavailable",
              difficulty: q.difficulty || "Medium"
            })).slice(0, numQuestions);
          }
        }
      } catch (retryError) {
        console.error("Retry also failed:", retryError);
      }
    }

    console.warn(`‚ö†Ô∏è  FALLING BACK to hardcoded questions for ${testType} ${subject}${topicText} - AI generation failed`);
    return createFallbackQuestions(testType, subject, numQuestions);
  }
}

export async function generateChatResponse(message) {
  const prompt = `You are an expert tutor for SAT, ACT, and AP test prep.

Student question: "${message}"

Provide a helpful response following these formatting rules:
- Use **bold text** for final answers and important formulas
- Use $inline math$ for mathematical expressions (e.g., $x = 5$, $\\frac{a}{b}$)
- Use $$display math$$ for longer equations (e.g., $$\\int_0^1 x^2 dx$$)
- For multi-step problems, wrap EACH individual step with <highlight>step explanation here</highlight>
- For concept explanations, highlight key insights with <highlight>important concept</highlight>
- Use multiple highlight tags to emphasize different steps and concepts throughout your response
- Clear explanations with practical study tips
- Encouraging tone focused on test preparation

Keep responses 2-3 paragraphs with proper math formatting.`;

  try {
    const completion = await together.chat.completions.create({
      model: "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
      messages: [
        {
          role: "system",
          content: "You are PrepMind's AI tutor. Help students with test preparation in a clear, encouraging way."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.8,
      max_tokens: 800
    });

    const response = completion.choices[0]?.message?.content;
    return response?.trim() || "Sorry, I'm having trouble responding. Please try again.";

  } catch (error) {
    console.error("Chat response failed:", error);
    return "I'm experiencing technical difficulties. Please try again in a moment.";
  }
}


// Simple fallback questions when AI fails
function createFallbackQuestions(testType, subject, numQuestions) {
  const mathQuestions = [
    {
      id: 1,
      question: "If 3x + 7 = 22, what is the value of x?",
      choices: ["x = 5", "x = 7", "x = 15", "x = 29"],
      correct_answer: 0,
      explanation: "To solve this linear equation, we need to isolate the variable x. First, subtract 7 from both sides: 3x + 7 - 7 = 22 - 7, which gives us 3x = 15. Next, divide both sides by 3 to get x = 5. We can verify this by substituting back: 3(5) + 7 = 15 + 7 = 22. This type of algebraic manipulation is fundamental for SAT math problems.",
      difficulty: "Easy",
    },
    {
      id: 2,
      question: "What is the slope between points (2, 5) and (6, 13)?",
      choices: ["2", "4", "8", "1/2"],
      correct_answer: 0,
      explanation: "The slope between two points is calculated using the formula: slope = (y‚ÇÇ - y‚ÇÅ)/(x‚ÇÇ - x‚ÇÅ). Substituting our points (2, 5) and (6, 13): slope = (13 - 5)/(6 - 2) = 8/4 = 2. This means for every 1 unit increase in x, y increases by 2 units. Understanding slope is crucial for coordinate geometry questions on standardized tests.",
      difficulty: "Medium",
    },
    {
      id: 3,
      question: "Solve the inequality 2x - 5 > 9.",
      choices: ["x > 7", "x > 2", "x > -7", "x > 5"],
      correct_answer: 0,
      explanation: "Add 5 to both sides to get 2x > 14, then divide by 2 to find x > 7. Dividing by a positive number keeps the inequality direction the same.",
      difficulty: "Easy",
    },
    {
      id: 4,
      question: "A right triangle has legs of length 3 and 4. What is the length of the hypotenuse?",
      choices: ["5", "7", "9", "25"],
      correct_answer: 0,
      explanation: "Use the Pythagorean theorem: 3^2 + 4^2 = 9 + 16 = 25, so the hypotenuse is 5.",
      difficulty: "Easy",
    },
  ];

  const readingQuestions = [
    {
      id: 1,
      question: "The word 'deliberate' most nearly means:",
      choices: ["intentional", "slow", "careful", "thoughtful"],
      correct_answer: 0,
      explanation: "The word 'deliberate' as an adjective means intentional, carefully planned, or done on purpose. It comes from the Latin 'deliberatus' meaning 'weighed' or 'considered carefully'. In test contexts, 'deliberate' often contrasts with accidental or spontaneous actions. When you see this word on reading comprehension passages, it usually suggests that someone made a conscious, thoughtful decision.",
      difficulty: "Medium",
    },
    {
      id: 2,
      question: "The word 'ephemeral' most nearly means:",
      choices: ["lasting", "temporary", "joyful", "mysterious"],
      correct_answer: 1,
      explanation: "'Ephemeral' describes something that lasts for a very short time. It comes from Greek roots meaning 'lasting only a day'.",
      difficulty: "Medium",
    },
    {
      id: 3,
      question: "The author's tone in a passage described as 'skeptical' is best characterized as:",
      choices: ["doubtful", "enthusiastic", "confused", "neutral"],
      correct_answer: 0,
      explanation: "A skeptical tone shows doubt about the subject. Authors using this tone often question or challenge the ideas presented.",
      difficulty: "Easy",
    },
  ];

  let questions = mathQuestions;
  if (subject.toLowerCase().includes("reading")) {
    questions = readingQuestions;
  }

  // Randomly select questions to match requested number
  const result = [];
  const pool = [...questions];
  while (result.length < numQuestions) {
    if (pool.length === 0) {
      pool.push(...questions);
    }
    const idx = Math.floor(Math.random() * pool.length);
    const [q] = pool.splice(idx, 1);
    result.push({ ...q, id: result.length + 1 });
  }

  return result;
}
