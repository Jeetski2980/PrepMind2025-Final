import Together from "together-ai";
import { GoogleGenerativeAI } from "@google/generative-ai";

const together = new Together({
  apiKey: process.env.TOGETHER_API_KEY,
});

// Google AI for question generation
const genAI = new GoogleGenerativeAI("AIzaSyAPjLeewXWKgBP-8WZVALK0dJdH02yYnqQ");
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/* =========================
   Helper functions
========================= */

function dedupeExact(questions) {
  const seen = new Set();
  const out = [];
  for (const q of questions) {
    const key = (q.question || "").toLowerCase().trim();
    if (seen.has(key)) continue;
    seen.add(key);
    out.push(q);
  }
  return out;
}

/* =========================
   Google AI Question Generation
========================= */

export async function generateQuestions(testType, subject, topic, numQuestions) {
  if (!process.env.TOGETHER_API_KEY) {
    throw new Error("TOGETHER_API_KEY is not set");
  }
  const topicText = topic ? ` focusing on ${topic}` : "";
  console.log(`🤖 Generating ${numQuestions} AI questions for: ${testType} ${subject}${topicText}`);

  try {
    // Enhanced prompt for Google AI to ensure diverse, non-repetitive questions
    const prompt = `Generate exactly ${numQuestions} unique multiple-choice questions for ${testType} ${subject}${topicText}.

CRITICAL REQUIREMENTS:
- Each question must be completely different in concept, formula, scenario, and approach
- NO repeated examples, equations, or similar problem types
- Questions appropriate for ${testType} ${subject} level
- Exactly 4 answer choices each
- Provide correct_answer as index 0-3 (zero-based)
- Each explanation must be exactly 3-5 complete sentences
- Mix difficulties: Easy, Medium, Hard
- For math: use simple notation like x^2, (a/b), sqrt(x) - avoid complex LaTeX
${testType === "AP Exams" ? `- Generate college-level ${subject} questions with advanced concepts` : ""}
${topic ? `- Focus specifically on ${topic} concepts and problems` : ""}

Return ONLY valid JSON in this exact format:
{
  "questions": [
    {
      "question": "Question text here",
      "choices": ["Choice A", "Choice B", "Choice C", "Choice D"],
      "correct_answer": 0,
      "explanation": "Detailed explanation in 3-5 sentences.",
      "difficulty": "Medium"
    }
  ]
}`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    const content = response.text();

    // Clean and parse JSON response
    let jsonText = content.trim();

    // Remove markdown formatting
    if (jsonText.includes("```")) {
      jsonText = jsonText.replace(/```json\n?/g, "").replace(/```\n?/g, "").replace(/\n?```$/g, "");
    }

    // Find JSON object if response has extra text
    if (!jsonText.startsWith("{")) {
      const startIndex = jsonText.indexOf("{");
      const endIndex = jsonText.lastIndexOf("}");
      if (startIndex !== -1 && endIndex !== -1) {
        jsonText = jsonText.substring(startIndex, endIndex + 1);
      }
    }

    const data = JSON.parse(jsonText);
    const questions = data.questions || [];

    if (questions.length === 0) {
      throw new Error("No questions generated by Google AI");
    }

    console.log(`✅ Successfully generated ${questions.length} AI questions for ${testType} ${subject}${topicText}`);

    // ✅ Format questions first (no slice, no IDs yet)
    const formattedQuestions = questions.map((q) => ({
      question: q.question || "",
      choices: Array.isArray(q.choices) ? q.choices.slice(0, 4) : ["A", "B", "C", "D"],
      correct_answer: typeof q.correct_answer === "number" ? Math.min(3, Math.max(0, q.correct_answer)) : 0,
      explanation: q.explanation || "Explanation not available",
      difficulty: q.difficulty || "Medium"
    }));

    // ✅ Deduplicate before slicing, then add IDs
    const uniqueQuestions = dedupeExact(formattedQuestions)
      .slice(0, numQuestions)
      .map((q, index) => ({ id: index + 1, ...q }));

    if (uniqueQuestions.length < numQuestions) {
      console.warn(`⚠️ Generated ${uniqueQuestions.length} unique questions, requested ${numQuestions}`);
    }

    return uniqueQuestions;

  } catch (error) {
    console.error(`❌ Google AI generation failed for ${testType} ${subject}${topicText}:`, error);
    throw new Error(`AI question generation failed: ${error.message}. Please try again.`);
  }
}

/* =========================
   Together AI Chat (unchanged)
========================= */

export async function generateChatResponse(message) {
  const prompt = `You are an expert tutor for SAT, ACT, and AP test prep.

Student question: "${message}"

Provide a helpful response following these formatting rules:
- Use **bold text** for final answers and important formulas
- Use $inline math$ for mathematical expressions (e.g., $x = 5$, $\\frac{a}{b}$)
- Use $$display math$$ for longer equations (e.g., $$\\int_0^1 x^2 dx$$)
- For multi-step problems, wrap EACH individual step with <highlight>step explanation here</highlight>
- For concept explanations, highlight key insights with <highlight>important concept</highlight>
- Use multiple highlight tags to emphasize different steps and concepts throughout your response
- Clear explanations with practical study tips
- Encouraging tone focused on test preparation

Keep responses 2-3 paragraphs with proper math formatting.`;

  try {
    const completion = await together.chat.completions.create({
      model: "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
      messages: [
        {
          role: "system",
          content: "You are PrepMind's AI tutor. Help students with test preparation using proper formatting for math and step-by-step solutions."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 1000,
      stream: false
    });

    const response = completion.choices[0]?.message?.content;
    return response?.trim() || "Sorry, I'm having trouble responding. Please try again.";

  } catch (error) {
    console.error("Chat response failed:", error);
    return "I'm experiencing technical difficulties. Please try again in a moment.";
  }
}
<<<<<<< HEAD
=======


// Simple fallback questions when AI fails
function createFallbackQuestions(testType, subject, numQuestions) {
  const mathQuestions = [
    {
      id: 1,
      question: "If 3x + 7 = 22, what is the value of x?",
      choices: ["x = 5", "x = 7", "x = 15", "x = 29"],
      correct_answer: 0,
      explanation: "To solve this linear equation, we need to isolate the variable x. First, subtract 7 from both sides: 3x + 7 - 7 = 22 - 7, which gives us 3x = 15. Next, divide both sides by 3 to get x = 5. We can verify this by substituting back: 3(5) + 7 = 15 + 7 = 22. This type of algebraic manipulation is fundamental for SAT math problems.",
      difficulty: "Easy",
    },
    {
      id: 2,
      question: "What is the slope between points (2, 5) and (6, 13)?",
      choices: ["2", "4", "8", "1/2"],
      correct_answer: 0,
      explanation: "The slope between two points is calculated using the formula: slope = (y₂ - y₁)/(x₂ - x₁). Substituting our points (2, 5) and (6, 13): slope = (13 - 5)/(6 - 2) = 8/4 = 2. This means for every 1 unit increase in x, y increases by 2 units. Understanding slope is crucial for coordinate geometry questions on standardized tests.",
      difficulty: "Medium",
    },
    {
      id: 3,
      question: "Solve the inequality 2x - 5 > 9.",
      choices: ["x > 7", "x > 2", "x > -7", "x > 5"],
      correct_answer: 0,
      explanation: "Add 5 to both sides to get 2x > 14, then divide by 2 to find x > 7. Dividing by a positive number keeps the inequality direction the same.",
      difficulty: "Easy",
    },
    {
      id: 4,
      question: "A right triangle has legs of length 3 and 4. What is the length of the hypotenuse?",
      choices: ["5", "7", "9", "25"],
      correct_answer: 0,
      explanation: "Use the Pythagorean theorem: 3^2 + 4^2 = 9 + 16 = 25, so the hypotenuse is 5.",
      difficulty: "Easy",
    },
  ];

  const readingQuestions = [
    {
      id: 1,
      question: "The word 'deliberate' most nearly means:",
      choices: ["intentional", "slow", "careful", "thoughtful"],
      correct_answer: 0,
      explanation: "The word 'deliberate' as an adjective means intentional, carefully planned, or done on purpose. It comes from the Latin 'deliberatus' meaning 'weighed' or 'considered carefully'. In test contexts, 'deliberate' often contrasts with accidental or spontaneous actions. When you see this word on reading comprehension passages, it usually suggests that someone made a conscious, thoughtful decision.",
      difficulty: "Medium",
    },
    {
      id: 2,
      question: "The word 'ephemeral' most nearly means:",
      choices: ["lasting", "temporary", "joyful", "mysterious"],
      correct_answer: 1,
      explanation: "'Ephemeral' describes something that lasts for a very short time. It comes from Greek roots meaning 'lasting only a day'.",
      difficulty: "Medium",
    },
    {
      id: 3,
      question: "The author's tone in a passage described as 'skeptical' is best characterized as:",
      choices: ["doubtful", "enthusiastic", "confused", "neutral"],
      correct_answer: 0,
      explanation: "A skeptical tone shows doubt about the subject. Authors using this tone often question or challenge the ideas presented.",
      difficulty: "Easy",
    },
  ];

  let questions = mathQuestions;
  if (subject.toLowerCase().includes("reading")) {
    questions = readingQuestions;
  }

  // Randomly select questions to match requested number
  const result = [];
  const pool = [...questions];
  while (result.length < numQuestions) {
    if (pool.length === 0) {
      pool.push(...questions);
    }
    const idx = Math.floor(Math.random() * pool.length);
    const [q] = pool.splice(idx, 1);
    result.push({ ...q, id: result.length + 1 });
  }

  return result;
}
>>>>>>> 9ea11f7e2021475bd1416f497cd3066da50e58d5
