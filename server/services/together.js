import Together from "together-ai";
import { GoogleGenerativeAI } from "@google/generative-ai";

const together = new Together({
  apiKey: process.env.TOGETHER_API_KEY,
});

// Google AI for question generation
const genAI = new GoogleGenerativeAI("AIzaSyAPjLeewXWKgBP-8WZVALK0dJdH02yYnqQ");
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/* =========================
   Helper functions
========================= */

function dedupeExact(questions) {
  const seen = new Set();
  const out = [];
  for (const q of questions) {
    const key = (q.question || "").toLowerCase().trim();
    if (seen.has(key)) continue;
    seen.add(key);
    out.push(q);
  }
  return out;
}

/* =========================
   Google AI Question Generation
========================= */

export async function generateQuestions(testType, subject, topic, numQuestions) {
  if (!process.env.TOGETHER_API_KEY) {
    throw new Error("TOGETHER_API_KEY is not set");
  }
  const topicText = topic ? ` focusing on ${topic}` : "";
  console.log(`🤖 Generating ${numQuestions} AI questions for: ${testType} ${subject}${topicText}`);

  try {
    // Enhanced prompt for Google AI to ensure diverse, non-repetitive questions
    const prompt = `Generate exactly ${numQuestions} unique multiple-choice questions for ${testType} ${subject}${topicText}.

CRITICAL REQUIREMENTS:
- Each question must be completely different in concept, formula, scenario, and approach
- NO repeated examples, equations, or similar problem types
- Questions appropriate for ${testType} ${subject} level
- Exactly 4 answer choices each
- Provide correct_answer as index 0-3 (zero-based)
- Each explanation must be exactly 3-5 complete sentences
- Mix difficulties: Easy, Medium, Hard
- For math: use simple notation like x^2, (a/b), sqrt(x) - avoid complex LaTeX
${testType === "AP Exams" ? `- Generate college-level ${subject} questions with advanced concepts` : ""}
${topic ? `- Focus specifically on ${topic} concepts and problems` : ""}

Return ONLY valid JSON in this exact format:
{
  "questions": [
    {
      "question": "Question text here",
      "choices": ["Choice A", "Choice B", "Choice C", "Choice D"],
      "correct_answer": 0,
      "explanation": "Detailed explanation in 3-5 sentences.",
      "difficulty": "Medium"
    }
  ]
}`;

    const result = await model.generateContent(prompt);
    const response = result.response;
    const content = response.text();

    // Clean and parse JSON response
    let jsonText = content.trim();

    // Remove markdown formatting
    if (jsonText.includes("```")) {
      jsonText = jsonText.replace(/```json\n?/g, "").replace(/```\n?/g, "").replace(/\n?```$/g, "");
    }

    // Find JSON object if response has extra text
    if (!jsonText.startsWith("{")) {
      const startIndex = jsonText.indexOf("{");
      const endIndex = jsonText.lastIndexOf("}");
      if (startIndex !== -1 && endIndex !== -1) {
        jsonText = jsonText.substring(startIndex, endIndex + 1);
      }
    }

    const data = JSON.parse(jsonText);
    const questions = data.questions || [];

    if (questions.length === 0) {
      throw new Error("No questions generated by Google AI");
    }

    console.log(`✅ Successfully generated ${questions.length} AI questions for ${testType} ${subject}${topicText}`);

    // ✅ Format questions first (no slice, no IDs yet)
    const formattedQuestions = questions.map((q) => ({
      question: q.question || "",
      choices: Array.isArray(q.choices) ? q.choices.slice(0, 4) : ["A", "B", "C", "D"],
      correct_answer: typeof q.correct_answer === "number" ? Math.min(3, Math.max(0, q.correct_answer)) : 0,
      explanation: q.explanation || "Explanation not available",
      difficulty: q.difficulty || "Medium"
    }));

    // ✅ Deduplicate before slicing, then add IDs
    const uniqueQuestions = dedupeExact(formattedQuestions)
      .slice(0, numQuestions)
      .map((q, index) => ({ id: index + 1, ...q }));

    if (uniqueQuestions.length < numQuestions) {
      console.warn(`⚠️ Generated ${uniqueQuestions.length} unique questions, requested ${numQuestions}`);
    }

    return uniqueQuestions;

  } catch (error) {
    console.error(`❌ Google AI generation failed for ${testType} ${subject}${topicText}:`, error);
    throw new Error(`AI question generation failed: ${error.message}. Please try again.`);
  }
}

/* =========================
   Together AI Chat (unchanged)
========================= */

export async function generateChatResponse(message) {
  const prompt = `You are an expert tutor for SAT, ACT, and AP test prep.

Student question: "${message}"

Provide a helpful response following these formatting rules:
- Use **bold text** for final answers and important formulas
- Use $inline math$ for mathematical expressions (e.g., $x = 5$, $\\frac{a}{b}$)
- Use $$display math$$ for longer equations (e.g., $$\\int_0^1 x^2 dx$$)
- For multi-step problems, wrap EACH individual step with <highlight>step explanation here</highlight>
- For concept explanations, highlight key insights with <highlight>important concept</highlight>
- Use multiple highlight tags to emphasize different steps and concepts throughout your response
- Clear explanations with practical study tips
- Encouraging tone focused on test preparation

Keep responses 2-3 paragraphs with proper math formatting.`;

  try {
    const completion = await together.chat.completions.create({
      model: "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
      messages: [
        {
          role: "system",
          content: "You are PrepMind's AI tutor. Help students with test preparation using proper formatting for math and step-by-step solutions."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 1000,
      stream: false
    });

    const response = completion.choices[0]?.message?.content;
    return response?.trim() || "Sorry, I'm having trouble responding. Please try again.";

  } catch (error) {
    console.error("Chat response failed:", error);
    return "I'm experiencing technical difficulties. Please try again in a moment.";
  }
}
